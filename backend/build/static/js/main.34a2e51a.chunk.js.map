{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","App","useState","board","setboard","turn","setturn","open","setOpen","message","setMessage","play","setPlay","roomname","setRoomname","gameroomname","setgameroomname","block","setBlock","handleClose","window","location","reload","handleGameCode","gameCode","handleGameState","gameState","console","log","JSON","parse","handleGameOver","winner","playerindex","handlePlayer","player","useEffect","on","className","Dialog","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","map","box","index","emit","changeturn","disabled","onSubmit","e","preventDefault","TextField","label","type","InputLabelProps","shrink","onChange","target","value","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34a2e51a.chunk.js","sourcesContent":["import './App.css';\nimport {useState,useEffect} from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport io from 'socket.io-client';\nconst socket = io(\"http://localhost:5000\")\nfunction App() {\n  \n  const [board, setboard] = useState([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"])\n  const [turn, setturn] = useState()\n  const [open, setOpen] = useState(false)\n  const [message, setMessage] = useState(\"\")\n  const [play, setPlay] = useState(false)\n  const [roomname, setRoomname] = useState(\"\")\n  const [gameroomname, setgameroomname] = useState(\"\")\n  const [block, setBlock] = useState(false)\n  const handleClose = () => {\n    window.location.reload();\n    setOpen(false);\n    \n  };\n  const changeturn =(index)=>{\n    \n      if( board[index]==\"\"){\n        //board[index]=\"X\"\n        socket.emit('keydown',index)\n        //setboard(board)\n        //setturn(\"O\")\n      }\n      \n      /*let wincom=[\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6],\n      ]\n      for(let i=0;i<wincom.length;i++){\n        let com= wincom[i]\n        let p1=com[0]\n        let p2=com[1]\n        let p3=com[2]\n        if(board[p1] !=\"\" && board[p2] !=\"\" && board[p3] !=\"\" && board[p1]==board[p2] && board[p3]==board[p2] && board[p1]==board[p3] ){\n          console.log(\"wins\")\n          setOpen(true)\n          setMessage(`player ${turn} Won!`)\n          setboard([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"])\n          return\n        }\n      }\n      if(board[0] !=\"\" && board[1] !=\"\" && board[2] !=\"\" && board[3] !=\"\" && board[4] !=\"\" && board[5] !=\"\" && \n      board[6] !=\"\" && board[7] !=\"\" && board[8] !=\"\" )\n        {\n          setOpen(true)\n          setMessage(\"draw !\")\n          setboard([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"])\n        }*/\n\n  }\n   const createroom = (e) =>{\n    e.preventDefault()\n    setturn(1)\n    socket.emit('create-room')\n    setPlay(true)\n    \n  }\n  const joinroom=(e)=>{\n    e.preventDefault()\n    setturn(2)\n    socket.emit('join-room',roomname)\n    setPlay(true)\n    \n  }\n  const handleGameCode= (gameCode)=> {\n    setgameroomname(gameCode)\n  }\n  const handleGameState= (gameState)=> {\n    console.log(JSON.parse(gameState))\n    setboard(JSON.parse(gameState))\n  }  \n  const handleGameOver=(winner)=>{\n    console.log(JSON.parse(winner))\n     let playerindex=JSON.parse(winner)\n    \n    if(playerindex.winner === 1)\n      setMessage(`player X Won!`)\n    if(playerindex.winner === 2)\n      setMessage(`player O Won!`)\n    if(playerindex.winner === 0)\n      setMessage(`Match Draw`)\n    setOpen(true)\n    setboard([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"])\n  }\n  const handlePlayer=(player)=>{\n    console.log(player,turn)\n    if(player===turn){\n      \n      setBlock(false)\n    }\n    else{\n      setBlock(true)\n    }\n  }\n  useEffect(() => {\n    socket.on('gameCode', handleGameCode);\n    socket.on('gameState',handleGameState);\n    socket.on('gameOver',handleGameOver);\n    socket.on('player',handlePlayer);\n  }, [])\n  \n\n  return (\n    <div className=\"App\">\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Result\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {message}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>ok</Button>\n        </DialogActions>\n        </Dialog>\n        \n        {\n          play ? ( <div><p>{gameroomname}</p><div className=\"board\">\n            \n          {\n            \n            board.map((box,index) => {\n              return (\n                  <div key={index} onClick={()=>changeturn(index)} className=\"square\" disabled={block} >\n                    <div className=\"symbol\" >\n                    {box}</div>\n                  </div>\n              )\n            })\n          }</div></div>):(<div>\n            <form onSubmit={joinroom}>\n                <TextField\n                  id=\"outlined-number\"\n                  label=\"Enter Room ID\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={e =>{setRoomname(e.target.value)}}/>\n                <Button type=\"submit\" variant=\"contained\">Join Room</Button>\n            </form>\n            <div>\n                <form onSubmit={createroom}>\n                <Button type=\"submit\" variant=\"contained\">Create Room</Button>\n                </form>\n            </div>\n            \n          </div>) \n        \n        }\n        \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}